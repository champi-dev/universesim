{"version":3,"file":"static/js/927.1822a437.chunk.js","mappings":"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","sources":["workers/naniteWorker.js","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\n/**\n * Web Worker for Nanite system parallel processing\n * Handles:\n * - LOD selection calculations\n * - Screen-space error computation\n * - Visibility culling\n * - Geometry simplification\n */\n\n// Message handlers\nself.onmessage = function(e) {\n  const { type, data } = e.data;\n  \n  switch (type) {\n    case 'SELECT_LODS':\n      handleLODSelection(data);\n      break;\n      \n    case 'SIMPLIFY_GEOMETRY':\n      handleGeometrySimplification(data);\n      break;\n      \n    case 'FRUSTUM_CULL':\n      handleFrustumCulling(data);\n      break;\n      \n    case 'COMPUTE_ERRORS':\n      handleErrorComputation(data);\n      break;\n      \n    default:\n      console.warn('Unknown worker message type:', type);\n  }\n};\n\n/**\n * Parallel LOD selection for multiple clusters\n */\nfunction handleLODSelection(data) {\n  const { clusters, camera, screenWidth, screenHeight, errorThreshold } = data;\n  const results = [];\n  \n  // Process clusters in parallel batches\n  if (clusters && clusters.length > 0) {\n    clusters.forEach(cluster => {\n      const result = selectBestLOD(\n        cluster,\n        camera,\n        screenWidth,\n        screenHeight,\n        errorThreshold\n      );\n      \n      if (result) {\n        results.push({\n          meshId: cluster.meshId,\n          clusterId: cluster.cluster ? cluster.cluster.id : cluster.id,\n          selectedLevel: result.level,\n          error: result.error,\n          triangleCount: result.triangleCount\n        });\n      }\n    });\n  }\n  \n  self.postMessage({\n    type: 'LOD_SELECTION_COMPLETE',\n    results: results\n  });\n}\n\n/**\n * Select best LOD based on screen-space error\n */\nfunction selectBestLOD(clusterData, camera, screenWidth, screenHeight, errorThreshold) {\n  // Handle different cluster data formats\n  const cluster = clusterData.cluster || clusterData;\n  const bounds = cluster.bounds;\n  \n  if (!bounds || !bounds.min || !bounds.max) {\n    return null; // Skip invalid clusters\n  }\n  \n  // Calculate distance from camera\n  const center = {\n    x: (bounds.min.x + bounds.max.x) / 2,\n    y: (bounds.min.y + bounds.max.y) / 2,\n    z: (bounds.min.z + bounds.max.z) / 2\n  };\n  \n  const dx = camera.position.x - center.x;\n  const dy = camera.position.y - center.y;\n  const dz = camera.position.z - center.z;\n  const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n  \n  // Calculate bounds size\n  const sizeX = bounds.max.x - bounds.min.x;\n  const sizeY = bounds.max.y - bounds.min.y;\n  const sizeZ = bounds.max.z - bounds.min.z;\n  const size = Math.sqrt(sizeX * sizeX + sizeY * sizeY + sizeZ * sizeZ);\n  \n  // Project to screen space\n  const fov = camera.fov * Math.PI / 180;\n  const screenSize = (size / distance) * screenHeight / (2 * Math.tan(fov / 2));\n  \n  // Calculate error\n  const triangleCount = cluster.triangleCount || 1000;\n  const error = screenSize / Math.max(1, Math.sqrt(triangleCount));\n  \n  // Select appropriate LOD level\n  let selectedLevel = 0;\n  if (error < errorThreshold * 0.25) selectedLevel = 4;\n  else if (error < errorThreshold * 0.5) selectedLevel = 3;\n  else if (error < errorThreshold) selectedLevel = 2;\n  else if (error < errorThreshold * 2) selectedLevel = 1;\n  \n  return {\n    level: selectedLevel,\n    error: error,\n    triangleCount: triangleCount\n  };\n}\n\n/**\n * Parallel geometry simplification\n */\nfunction handleGeometrySimplification(data) {\n  const { vertices, indices, targetRatio } = data;\n  \n  // Simple edge collapse simplification\n  const simplified = simplifyMesh(vertices, indices, targetRatio);\n  \n  // Don't transfer ownership, just send the data\n  self.postMessage({\n    type: 'SIMPLIFICATION_COMPLETE',\n    result: simplified\n  });\n}\n\n/**\n * Simplify mesh using edge collapse\n */\nfunction simplifyMesh(verticesArray, indicesArray, targetRatio) {\n  // Convert arrays if needed\n  const vertices = verticesArray instanceof Float32Array ? verticesArray : new Float32Array(verticesArray);\n  const indices = indicesArray instanceof Uint32Array ? indicesArray : new Uint32Array(indicesArray);\n  \n  const targetIndexCount = Math.floor(indices.length * targetRatio);\n  \n  // Build vertex-face adjacency\n  const vertexFaces = new Map();\n  for (let i = 0; i < indices.length; i += 3) {\n    const v0 = indices[i];\n    const v1 = indices[i + 1];\n    const v2 = indices[i + 2];\n    \n    addVertexFace(vertexFaces, v0, i / 3);\n    addVertexFace(vertexFaces, v1, i / 3);\n    addVertexFace(vertexFaces, v2, i / 3);\n  }\n  \n  // Simple decimation - sample triangles\n  const newIndices = new Uint32Array(targetIndexCount);\n  const step = Math.ceil(indices.length / targetIndexCount);\n  \n  let writeIndex = 0;\n  for (let i = 0; i < indices.length && writeIndex < targetIndexCount - 2; i += step * 3) {\n    if (i + 2 < indices.length) {\n      newIndices[writeIndex++] = indices[i];\n      newIndices[writeIndex++] = indices[i + 1];\n      newIndices[writeIndex++] = indices[i + 2];\n    }\n  }\n  \n  return {\n    vertices: Array.from(vertices),\n    indices: Array.from(newIndices.slice(0, writeIndex))\n  };\n}\n\nfunction addVertexFace(map, vertex, face) {\n  if (!map.has(vertex)) {\n    map.set(vertex, []);\n  }\n  map.get(vertex).push(face);\n}\n\n/**\n * Parallel frustum culling\n */\nfunction handleFrustumCulling(data) {\n  const { objects, frustumPlanes } = data;\n  const visible = [];\n  const culled = [];\n  \n  objects.forEach(obj => {\n    if (isInFrustum(obj.bounds, frustumPlanes)) {\n      visible.push(obj.id);\n    } else {\n      culled.push(obj.id);\n    }\n  });\n  \n  self.postMessage({\n    type: 'FRUSTUM_CULL_COMPLETE',\n    visible: visible,\n    culled: culled\n  });\n}\n\n/**\n * Check if bounds are in frustum\n */\nfunction isInFrustum(bounds, planes) {\n  for (let i = 0; i < 6; i++) {\n    const plane = planes[i];\n    \n    // Find the vertex furthest in the direction of the plane normal\n    const px = plane.x > 0 ? bounds.max.x : bounds.min.x;\n    const py = plane.y > 0 ? bounds.max.y : bounds.min.y;\n    const pz = plane.z > 0 ? bounds.max.z : bounds.min.z;\n    \n    // If this vertex is outside, the whole box is outside\n    if (plane.x * px + plane.y * py + plane.z * pz + plane.w < 0) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/**\n * Batch compute screen-space errors\n */\nfunction handleErrorComputation(data) {\n  const { clusters, camera, screenWidth, screenHeight } = data;\n  const errors = new Float32Array(clusters.length);\n  \n  clusters.forEach((cluster, index) => {\n    // Calculate distance\n    const center = {\n      x: (cluster.bounds.min.x + cluster.bounds.max.x) / 2,\n      y: (cluster.bounds.min.y + cluster.bounds.max.y) / 2,\n      z: (cluster.bounds.min.z + cluster.bounds.max.z) / 2\n    };\n    \n    const dx = camera.position.x - center.x;\n    const dy = camera.position.y - center.y;\n    const dz = camera.position.z - center.z;\n    const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n    \n    // Calculate size\n    const sizeX = cluster.bounds.max.x - cluster.bounds.min.x;\n    const sizeY = cluster.bounds.max.y - cluster.bounds.min.y;\n    const sizeZ = cluster.bounds.max.z - cluster.bounds.min.z;\n    const size = Math.sqrt(sizeX * sizeX + sizeY * sizeY + sizeZ * sizeZ);\n    \n    // Screen-space projection\n    const fov = camera.fov * Math.PI / 180;\n    const screenSize = (size / distance) * screenHeight / (2 * Math.tan(fov / 2));\n    \n    // Error metric\n    const triangleCount = cluster.triangleCount || 1000;\n    errors[index] = screenSize / Math.max(1, Math.sqrt(triangleCount));\n  });\n  \n  // Convert to regular array to avoid transfer issues\n  self.postMessage({\n    type: 'ERROR_COMPUTATION_COMPLETE',\n    errors: Array.from(errors)\n  });\n}\n\n// Export for module bundlers (if needed)\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { handleLODSelection, handleGeometrySimplification };\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(927);\n"],"names":["handleLODSelection","data","clusters","camera","screenWidth","screenHeight","errorThreshold","results","length","forEach","cluster","result","clusterData","bounds","min","max","center","x","y","z","dx","position","dy","dz","distance","Math","sqrt","sizeX","sizeY","sizeZ","size","fov","PI","screenSize","tan","triangleCount","error","selectedLevel","level","selectBestLOD","push","meshId","clusterId","id","self","postMessage","type","handleGeometrySimplification","vertices","indices","targetRatio","simplified","verticesArray","indicesArray","Float32Array","Uint32Array","targetIndexCount","floor","vertexFaces","Map","i","v0","v1","v2","addVertexFace","newIndices","step","ceil","writeIndex","Array","from","slice","simplifyMesh","map","vertex","face","has","set","get","onmessage","e","objects","frustumPlanes","visible","culled","obj","planes","plane","px","py","pz","w","isInFrustum","handleFrustumCulling","errors","index","handleErrorComputation","console","warn","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}